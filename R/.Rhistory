blank.theme <- theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
# save to a file
png("../Figures/realms_map.png", width=2300, height=1000, res=200)
realm.plot <- ggplot(C.fort[is.na(C.fort$REALM) == FALSE,], aes(long, lat, group=group)) +
geom_polygon(aes(fill=REALM), colour="darkgray", size=.2) +
geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL), shape=3, colour="black") +
scale_fill_brewer(palette = "Dark2", name="Realm") +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
xlab("") + ylab("") + theme_minimal() + blank.theme +
theme(legend.position="right") +
guides(fill=guide_legend(title=NULL))
realm.plot
dev.off()
# save to a file
png("../Figures/realms_map.png", width=2300, height=1000, res=200)
realm.plot <- ggplot(C.fort[is.na(C.fort$REALM) == FALSE,], aes(long, lat, group=group)) +
geom_polygon(aes(fill=REALM), colour="darkgray", size=.2) +
geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL), shape=1, colour="black") +
scale_fill_brewer(palette = "Dark2", name="Realm") +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
xlab("") + ylab("") + theme_minimal() + blank.theme +
theme(legend.position="right") +
guides(fill=guide_legend(title=NULL))
realm.plot
dev.off()
# save to a file
png("../Figures/realms_map_small.png", width=2400, height=1000, res=400)
realm.plot.small <- ggplot(C.fort[is.na(C.fort$REALM) == FALSE,], aes(long, lat, group=group)) +
geom_polygon(aes(fill=REALM), colour="darkgray", size=.2) +
scale_fill_brewer(palette = "Dark2", name="Realm") +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
xlab("") + ylab("") + theme_minimal() + blank.theme +
theme(legend.position="right") +
guides(fill=guide_legend(title=NULL))
realm.plot.small
dev.off()
# ------------------------------------------------------------------------------
# ISLANDS
# save to a file
png("../Figures/island_vs_mainland_map.png", width=2300, height=1000, res=200)
isl.plot <- ggplot(C.fort[is.na(C.fort$REALM) == FALSE,], aes(long, lat, group=group)) +
#geom_hline(yintercept = 0, colour="black", size=0.2) +
# geom_polygon(data=LINES,  aes(long, lat, group=group),
#             colour="black", size=0.2) +
geom_polygon(aes(fill=as.factor(ISLAND)), colour="darkgrey", size=.2) +
geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL), shape=3, colour="black") +
scale_fill_brewer(palette = "Set2", name="Island") +
scale_x_continuous(limits = c(-13000000, 16000000)) +
xlab("") + ylab("") + theme_minimal() + blank.theme
isl.plot
dev.off()
# ------------------------------------------------------------------------------
# NORTHERN AND SOUTHERN HEMISPHERES
# save to a file
png("../Figures/north_south_hemispheres_map.png", width=1800, height=1000, res=200)
hemi.plot <- ggplot(C.fort[is.na(C.fort$REALM) == FALSE,], aes(long, lat, group=group)) +
#geom_hline(yintercept = 0, colour="black", size=0.2) +
geom_polygon(data=LINES,  aes(long, lat, group=group),
colour="darkgrey", size=0.2) +
geom_polygon(aes(fill=as.factor(Hemisphere)), colour="darkgrey", size=.2) +
geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL), shape=3, colour="black") +
scale_fill_brewer(palette = "Reds", name="", type=qual) +
scale_x_continuous(limits = c(-13000000, 16000000)) +
xlab("") + ylab("") + theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
legend.position="none") + blank.theme
hemi.plot
dev.off()
################################################################################
# DISSECTING THE STAN MODEL RESULTS
################################################################################
# ------------------------------------------------------------------------------
# Observed vs predicted values with the full Bayesian uncertainty
pred.REALM.brm <- predict(brm.REALM, type="response",
newdata = DAT, probs = c(0.025, 0.25, 0.5, 0.75, 0.975))
pred.REALM.brm <- data.frame(pred.REALM.brm,
S = DAT$S,
grain = DAT$DAT_TYPE,
model = "Model REALM")
pred.SMOOTH.brm <- predict(brm.SMOOTH, type="response",
newdata = DAT, probs = c(0.025, 0.25, 0.5, 0.75, 0.975))
pred.SMOOTH.brm <- data.frame(pred.SMOOTH.brm,
S = DAT$S,
grain = DAT$DAT_TYPE,
model = "Model SMOOTH")
pred.brm <- rbind(pred.REALM.brm, pred.SMOOTH.brm)
obs.pred.brm <- ggplot(pred.brm, aes(x = S, y = X50.ile)) +
geom_linerange(aes(ymin = X2.5.ile, ymax = X97.5.ile, colour = grain), alpha = 0.2) +
geom_linerange(aes(ymin = X25.ile, ymax = X75.ile, colour = grain), size=1, alpha = 0.4) +
geom_point(aes(colour=grain), shape = 1) +
xlab("log10 Observed S") +
ylab("log10 Predicted S") +
geom_abline(intercept = 0, slope = 1, colour="black") + theme_bw() +
scale_x_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
scale_y_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
facet_grid(.~model) +
labs(size = "log10 Area [km]") + labs(colour = "grain") +
guides(colour = guide_legend(override.aes = list(size=4, shape=19), title="grain"))
obs.pred.brm
# export the figure
png("../Figures/observed_vs_predicted.png", width=2000, height=950, res=250)
obs.pred.brm
dev.off()
head(pred.brm)
obs.pred.brm <- ggplot(pred.brm, aes(x = S, y = X50.ile)) +
geom_linerange(aes(ymin = Q2.5, ymax = Q97.5, colour = grain), alpha = 0.2) +
geom_linerange(aes(ymin = Q25, ymax = Q75, colour = grain), size=1, alpha = 0.4) +
geom_point(aes(colour=grain), shape = 1) +
xlab("log10 Observed S") +
ylab("log10 Predicted S") +
geom_abline(intercept = 0, slope = 1, colour="black") + theme_bw() +
scale_x_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
scale_y_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
facet_grid(.~model) +
labs(size = "log10 Area [km]") + labs(colour = "grain") +
guides(colour = guide_legend(override.aes = list(size=4, shape=19), title="grain"))
obs.pred.brm
obs.pred.brm <- ggplot(pred.brm, aes(x = S, y = Q50)) +
geom_linerange(aes(ymin = Q2.5, ymax = Q97.5, colour = grain), alpha = 0.2) +
geom_linerange(aes(ymin = Q25, ymax = Q75, colour = grain), size=1, alpha = 0.4) +
geom_point(aes(colour=grain), shape = 1) +
xlab("log10 Observed S") +
ylab("log10 Predicted S") +
geom_abline(intercept = 0, slope = 1, colour="black") + theme_bw() +
scale_x_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
scale_y_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
facet_grid(.~model) +
labs(size = "log10 Area [km]") + labs(colour = "grain") +
guides(colour = guide_legend(override.aes = list(size=4, shape=19), title="grain"))
obs.pred.brm
# export the figure
png("../Figures/observed_vs_predicted.png", width=2000, height=950, res=250)
obs.pred.brm
dev.off()
# observed vs predicted plots
obs.pred.brm <- ggplot(pred.brm, aes(x = S, y = Q50)) +
geom_linerange(aes(ymin = Q2.5, ymax = Q97.5, colour = grain), alpha = 0.2) +
geom_linerange(aes(ymin = Q25, ymax = Q75, colour = grain), size=1, alpha = 0.4) +
geom_point(aes(colour=grain), shape = 1) +
xlab("log10 Observed S") +
ylab("log10 Predicted S") +
geom_abline(intercept = 0, slope = 1, colour="black") + theme_bw() +
scale_x_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
scale_y_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
facet_grid(.~model) +
labs(colour = "grain") +
guides(colour = guide_legend(override.aes = list(size=4, shape=19), title="grain"))
obs.pred.brm
# observed vs predicted plots
obs.pred.brm <- ggplot(pred.brm, aes(x = S, y = Q50)) +
geom_linerange(aes(ymin = Q2.5, ymax = Q97.5, colour = grain), alpha = 0.2) +
geom_linerange(aes(ymin = Q25, ymax = Q75, colour = grain), size=1, alpha = 0.4) +
geom_point(aes(colour=grain), shape = 1) +
xlab(expression(log[10] ~ "Observed S")) +
ylab("log10 Predicted S") +
geom_abline(intercept = 0, slope = 1, colour="black") + theme_bw() +
scale_x_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
scale_y_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
facet_grid(.~model) +
labs(colour = "grain") +
guides(colour = guide_legend(override.aes = list(size=4, shape=19), title="grain"))
obs.pred.brm
# observed vs predicted plots
obs.pred.brm <- ggplot(pred.brm, aes(x = S, y = Q50)) +
geom_linerange(aes(ymin = Q2.5, ymax = Q97.5, colour = grain), alpha = 0.2) +
geom_linerange(aes(ymin = Q25, ymax = Q75, colour = grain), size=1, alpha = 0.4) +
geom_point(aes(colour=grain), shape = 1) +
xlab(expression(log[10] ~ "(Observed S")) +
ylab("log10 Predicted S") +
geom_abline(intercept = 0, slope = 1, colour="black") + theme_bw() +
scale_x_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
scale_y_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
facet_grid(.~model) +
labs(colour = "grain") +
guides(colour = guide_legend(override.aes = list(size=4, shape=19), title="grain"))
obs.pred.brm
# observed vs predicted plots
obs.pred.brm <- ggplot(pred.brm, aes(x = S, y = Q50)) +
geom_linerange(aes(ymin = Q2.5, ymax = Q97.5, colour = grain), alpha = 0.2) +
geom_linerange(aes(ymin = Q25, ymax = Q75, colour = grain), size=1, alpha = 0.4) +
geom_point(aes(colour=grain), shape = 1) +
xlab(expression(log[10] ~ "(Observed S)")) +
ylab("log10 Predicted S") +
geom_abline(intercept = 0, slope = 1, colour="black") + theme_bw() +
scale_x_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
scale_y_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
facet_grid(.~model) +
labs(colour = "grain") +
guides(colour = guide_legend(override.aes = list(size=4, shape=19), title="grain"))
obs.pred.brm
# observed vs predicted plots
obs.pred.brm <- ggplot(pred.brm, aes(x = S, y = Q50)) +
geom_linerange(aes(ymin = Q2.5, ymax = Q97.5, colour = grain), alpha = 0.2) +
geom_linerange(aes(ymin = Q25, ymax = Q75, colour = grain), size=1, alpha = 0.4) +
geom_point(aes(colour=grain), shape = 1) +
xlab("Observed S") +
ylab("Predicted S") +
geom_abline(intercept = 0, slope = 1, colour="black") + theme_bw() +
scale_x_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
scale_y_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
facet_grid(.~model) +
labs(colour = "grain") +
guides(colour = guide_legend(override.aes = list(size=4, shape=19), title="grain"))
obs.pred.brm
# export the figure
png("../Figures/observed_vs_predicted.png", width=2000, height=950, res=250)
obs.pred.brm
dev.off()
for.pairs <- dplyr::select(DAT, S, Tree_dens, min_DBH, GPP, ANN_T, ISO_T,
MIN_P, P_SEAS, ALT_DIF, ELONG, ISLAND, REALM, DAT_TYPE)
p <- ggpairs(for.pairs, aes(colour=DAT_TYPE)) + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# save to a file
png("../Figures/predictors_pairplot.png", width=2000, height=2300, res=100)
p
dev.off()
X11()
p
# save to a file
png("../Figures/predictors_pairplot.png", width=2000, height=2300, res=100)
print(p)
dev.off()
getwd()
session.info()
?sessionInfo
sessionInfo()
cat(inf, file = "sessionInfo.txt")
inf <- sessionInfo()
cat(inf, file = "sessionInfo.txt")
?cat
class(inf)
inf
writeLines(capture.output(sessionInfo()), "sessionInfo.txt")
#
################################################################################
# LOAD THE PACKAGES, THE DATA, AND THE MODELS
################################################################################
source("0_libraries_functions_settings.r")
source("4_Data_loading_standardization_and_centering.r")
load("../Models/gam_REALM.Rdata")
load("../Models/gam_SMOOTH.Rdata")
load("../Models/brms_REALM.RData")
load("../Models/brms_SMOOTH.RData")
for.pairs <- dplyr::select(DAT, S, Tree_dens, min_DBH, GPP, ANN_T, ISO_T,
MIN_P, P_SEAS, ALT_DIF, ELONG, ISLAND, REALM, DAT_TYPE)
head(for.pairs)
png("../Figures/predictors_pairplot.png", width=2000, height=2300, res=100)
ggpairs(for.pairs, aes(colour=DAT_TYPE)) + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dev.off()
for.pairs <- dplyr::select(DAT, S, Tree_dens, min_DBH, GPP, ANN_T, ISO_T,
MIN_P, P_SEAS, ALT_DIF, ISLAND, REALM, DAT_TYPE)
p <- ggpairs(for.pairs, aes(colour=DAT_TYPE)) + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# save to a file
png("../Figures/predictors_pairplot.png", width=2000, height=2300, res=100)
ggpairs(for.pairs, aes(colour=DAT_TYPE)) + theme_bw() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dev.off()
prd.area.SMOOTH <- draw.all(par.names = area.parnames.SMOOTH,
vars = area.vars.SMOOTH,
brm.fit = brm.SMOOTH)
partial.res.area <- prd.area.SMOOTH + residuals(gam.SMOOTH)
AREA <- data.frame(prd.area.SMOOTH, DAT, partial.resid = partial.res.area)
# save to a file
png("../Figures/triphasic_SAR_SMOOTH.png", width=1500, height=1500, res=500)
ggplot(AREA, aes(x=exp(Area_km*A.sd + A.mean), y=X50.)) +
geom_point(aes(x=log10(exp(Area_km*A.sd + A.mean)), y=partial.resid.50.),
color="grey", shape=1) +
geom_line(size=0.8) +
scale_x_continuous(trans = "log10",
minor_breaks = NULL,
breaks = c(0.01, 1, 100, 10000, 1000000),
labels = c("0.01", "1", expression(10^2), expression(10^4), expression(10^6))) +
ylab("Partial effect of Area") +
xlab(expression("Area" ~ (km^2))) +
geom_ribbon(aes(ymin=X2.5., ymax=X97.5.), alpha=0.3) +
theme_bw()
dev.off()
# ------------------------------------------------------------------------------
# Observed vs predicted values with the full Bayesian uncertainty
pred.REALM.brm <- predict(brm.REALM, type="response",
newdata = DAT, probs = c(0.025, 0.25, 0.5, 0.75, 0.975))
pred.REALM.brm <- data.frame(pred.REALM.brm,
S = DAT$S,
grain = DAT$DAT_TYPE,
model = "Model REALM")
pred.SMOOTH.brm <- predict(brm.SMOOTH, type="response",
newdata = DAT, probs = c(0.025, 0.25, 0.5, 0.75, 0.975))
pred.SMOOTH.brm <- data.frame(pred.SMOOTH.brm,
S = DAT$S,
grain = DAT$DAT_TYPE,
model = "Model SMOOTH")
pred.brm <- rbind(pred.REALM.brm, pred.SMOOTH.brm)
# observed vs predicted plots
obs.pred.brm <- ggplot(pred.brm, aes(x = S, y = Q50)) +
geom_linerange(aes(ymin = Q2.5, ymax = Q97.5, colour = grain), alpha = 0.2) +
geom_linerange(aes(ymin = Q25, ymax = Q75, colour = grain), size=1, alpha = 0.4) +
geom_point(aes(colour=grain), shape = 1) +
xlab("Observed S") +
ylab("Predicted S") +
geom_abline(intercept = 0, slope = 1, colour="black") + theme_bw() +
scale_x_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
scale_y_continuous(trans = "log10", breaks = c(1, 10, 100, 1000, 10000)) +
facet_grid(.~model) +
labs(colour = "grain") +
guides(colour = guide_legend(override.aes = list(size=4, shape=19), title="grain"))
obs.pred.brm
# export the figure
png("../Figures/observed_vs_predicted.png", width=2000, height=950, res=250)
obs.pred.brm
dev.off()
# this is how to get the data out:
standata(brm.REALM)
# ------------------------------------------------------------------------------
# brm.SMOOTH results
# ------------------------------------------------------------------------------
all.varnames.SMOOTH <- rownames(summary(brm.SMOOTH)$fixed)
data.frame(all.varnames.SMOOTH)
data.frame(1:52, summary(brm.SMOOTH$fit)$summary[,'50%'])
all.vars.SMOOTH <- standata(brm.SMOOTH)$X
all.splines.SMOOTH <- standata(brm.SMOOTH)$Zs_2_1
pars.country.splines.SMOOTH <- summary(brm.SMOOTH$fit)$summary[,'50%'][26:38]
pars.plot.splines.SMOOTH <- summary(brm.SMOOTH$fit)$summary[,'50%'][39:51]
pars.envivars.SMOOTH <- summary(brm.SMOOTH$fit)$summary[,'50%'][5:22]
SMOOTH.area.id <- c(2:4)
area.varnames.SMOOTH <- all.varnames.SMOOTH[SMOOTH.area.id]
area.parnames.SMOOTH <- paste("b", area.varnames.SMOOTH, sep="_")
area.vars.SMOOTH <- model.matrix.gam(gam.SMOOTH)[,SMOOTH.area.id]
# ------------------------------------------------------------------------------
# brm.REALM results
# ------------------------------------------------------------------------------
all.varnames.REALM <- rownames(summary(brm.REALM)$fixed)
data.frame(all.varnames.REALM)
all.vars.REALM <- model.matrix.gam(gam.REALM)
all.pars.REALM <- summary(brm.REALM)$fixed[,'Estimate']
REALM.hist.id <- c(2:7, 17:37)
hist.varnames.REALM <- all.varnames.REALM[REALM.hist.id]
hist.parnames.REALM <- paste("b", hist.varnames.REALM, sep="_")
hist.vars.REALM <- model.matrix.gam(gam.REALM)[,REALM.hist.id]
# ------------------------------------------------------------------------------
# EXTRACT ONE PARAMETER FROM THE BRMS FITTED OBJECT (BY NAME)
extract.par <- function(par.name, brm.fit)
{
n.iter <- summary(brm.fit)$iter
n.chains <- summary(brm.fit)$chains
n.thin <- summary(brm.fit)$thin
n.warm <- summary(brm.fit)$warmup
res <- list()
for(chain in 1:n.chains){
one.chain <- brm.fit$fit@sim$samples[[chain]][par.name][[1]]
res[[chain]] <- one.chain[((n.warm/n.thin)+1):length(one.chain)]
}
res <- unlist(res)
return(res)
}
# b <- extract.par("b_Intercept", brm.REALM)
# EXTRACT MULTIPLE PARAMETERS FROM THE BRMS FITTED OBJECT (BY NAMES)
extract.pars <- function(par.names, brm.fit)
{
res <- list()
for(par in par.names){
res[[par]] <- extract.par(par, brm.fit)
}
return(res)
}
#bb <- extract.pars(hist.parnames.REALM, brm.REALM)
# CHOOSE ONE SAMPLING ITERATION AND SAMPLE PARAMETER VALUES FROM THAT
draw.one <- function(par.list, i){
myfun <- function(x, i) x[i]
unlist(lapply(par.list, FUN=myfun, i=i))
}
#bbb <- draw.one(bb, 1)
# CALCULATE PREDICTION FOR EACH PARAMETER DRAW IN THE CHAIN
draw.all <- function(par.names, vars, brm.fit, probs=c(0.025, 0.25, 0.5,0.75, 0.975))
{
B <- extract.pars(par.names, brm.fit)
N <- length(B[[1]])
res <- matrix(nrow=nrow(vars), ncol=N)
for(i in 1:N){
b <- draw.one(B, i=i)
res[,i] <- vars %*% b
}
require(matrixStats)
res <- matrixStats::rowQuantiles(res, probs=probs)
return(res)
}
################################################################################
# SUMMARIZE THE REALM PREDICTIONS
################################################################################
prd.brm.REALM <- all.vars.REALM %*% all.pars.REALM
#prd.brm.REALM <- predict(brm.REALM, newdata=DAT, type="link")[,'Estimate']
res.brm.REALM <- prd.brm.REALM - log(DAT$S)
prd.history.REALM <- draw.all(par.names = hist.parnames.REALM,
vars = hist.vars.REALM,
brm.fit = brm.REALM)
resid.REALM <- prd.history.REALM[,'50%'] + res.brm.REALM
HIST <- data.frame(prd.history.REALM, DAT, resid.REALM)
p.hist.multi <- ggplot(HIST, aes(exp(Area_km*A.sd + A.mean), X50.)) +
geom_point(aes(exp(Area_km*A.sd + A.mean), resid.REALM),
colour="grey", shape=1) +
geom_linerange(aes(ymin=X2.5., ymax=X97.5., colour=REALM), alpha=0.5) +
geom_linerange(aes(ymin=X25., ymax=X75., colour=REALM), size=1) +
geom_line(aes(colour=REALM)) +
scale_y_continuous(minor_breaks = NULL) +
scale_x_continuous(trans = "log10",
minor_breaks = NULL,
breaks = c(0.01, 1, 100, 10000, 1000000),
labels = c("0.01", "1", "100", expression(10^4), expression(10^6))) +
xlab(expression("Area" ~ (km^2))) +
ylab("Region effect") +
scale_colour_brewer(palette = "Dark2", name="Realm") +
theme_bw()  +
theme(legend.position="none") +
facet_grid(. ~ REALM)
p.hist.multi
theme.legend <- theme(legend.position="right",#c(0.25,0.8),
legend.title = element_blank(),
legend.background = element_rect(fill="white",
size=0.2, linetype="solid",
colour ="black"))
p.hist.single <- ggplot(HIST, aes(exp(Area_km*A.sd + A.mean), X50.)) +
geom_linerange(aes(ymin=X2.5., ymax=X97.5., colour=REALM), alpha=0.4) +
geom_linerange(aes(ymin=X25., ymax=X75., colour=REALM), size=1) +
geom_line( aes(colour=REALM)) +
scale_colour_brewer(palette = "Dark2", name="Realm") +
scale_y_continuous(minor_breaks = NULL) +
scale_x_continuous(trans = "log10",
minor_breaks = NULL,
breaks = c(0.01, 1, 100, 10000, 1000000),
labels = c("0.01", "1", "100", expression(10^4), expression(10^6))) +
xlab(expression("Area" ~ (km^2))) +
ylab("Region effect") +
theme_bw()+
theme.legend +
theme(plot.title = element_text(hjust = -0.125))
p.hist.single
# Figure for the main text - save to a file
tiff("../Figures/region_effects_ovelaid_REALM.tif", width=1800, height=2700, res=400,
compression = "lzw")
grid.arrange(realm.plot + ggtitle("A") +theme(legend.position="none") ,
p.hist.single,
heights=c(0.6,1),
nrow=2)
dev.off()
pdf("../Figures/region_effects_ovelaid_REALM.pdf", width=6, height=4)
p.hist.single
dev.off()
# Figure for supplementary material - save to a file
tiff("../Figures/region_effects_individually_REALM.tif",
width=2500, height=600, res=250,
compression = "lzw")
p.hist.multi
dev.off()
################################################################################
#  TRIPHASIC SAR CURVE FROM THE SMOOTH PREDICTIONS
################################################################################
prd.area.SMOOTH <- draw.all(par.names = area.parnames.SMOOTH,
vars = area.vars.SMOOTH,
brm.fit = brm.SMOOTH)
partial.res.area <- prd.area.SMOOTH + residuals(gam.SMOOTH)
AREA <- data.frame(prd.area.SMOOTH, DAT, partial.resid = partial.res.area)
# save to a file
png("../Figures/triphasic_SAR_SMOOTH.png", width=1500, height=1500, res=500)
ggplot(AREA, aes(x=exp(Area_km*A.sd + A.mean), y=X50.)) +
geom_point(aes(x=log10(exp(Area_km*A.sd + A.mean)), y=partial.resid.50.),
color="grey", shape=1) +
geom_line(size=0.8) +
scale_x_continuous(trans = "log10",
minor_breaks = NULL,
breaks = c(0.01, 1, 100, 10000, 1000000),
labels = c("0.01", "1", expression(10^2), expression(10^4), expression(10^6))) +
ylab("Partial effect of Area") +
xlab(expression("Area" ~ (km^2))) +
geom_ribbon(aes(ymin=X2.5., ymax=X97.5.), alpha=0.3) +
theme_bw()
dev.off()
png("../Figures/triphasic_SAR_SMOOTH.png", width=1500, height=1500, res=500)
ggplot(AREA, aes(x=exp(Area_km*A.sd + A.mean), y=X50.)) +
geom_point(aes(x=exp(Area_km*A.sd + A.mean), y=partial.resid.50.),
color="grey", shape=1) +
geom_line(size=0.8) +
scale_x_continuous(trans = "log10",
minor_breaks = NULL,
breaks = c(0.01, 1, 100, 10000, 1000000),
labels = c("0.01", "1", expression(10^2), expression(10^4), expression(10^6))) +
ylab("Partial effect of Area") +
xlab(expression("Area" ~ (km^2))) +
geom_ribbon(aes(ymin=X2.5., ymax=X97.5.), alpha=0.3) +
theme_bw()
dev.off()
p.hist.single
tiff("../Figures/region_effects_ovelaid_REALM.tif", width=1800, height=2700, res=400,
compression = "lzw")
grid.arrange(realm.plot + theme(legend.position="none") ,
p.hist.single,
heights=c(0.6,1),
nrow=2)
dev.off()
