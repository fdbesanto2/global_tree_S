################################################################################
# Author: Petr Keil
# Email: pkeil@seznam.cz
# Date: Oct 23 2018
################################################################################
#
# Description: This is where the two models are fit to the data, both in
# using maximum likelihood (package 'mgcv') and Hamiltonian Monte Carlo
# (package 'brms'). The fitted objects are exported to files, so that they
# can be further used for predictions and inference.
# Note: All predictors are scaled to 0 mean and variance of 1. Also, some
# predictors (Area_km, Tree_dens) are log transformed.
################################################################################
# LOAD THE DATA AND THE PACKAGES
################################################################################
source("0_libraries_functions_settings.r")
source("4.1_Data_loading_standardization_and_centering.r")
################################################################################
# DEFINING THE R MODEL FORMULAS
################################################################################
REALM.formula <- S ~
REALM + poly(Area_km,3):REALM + # biogeographic realm
Tree_dens + Tree_dens:Area_km + # tree density
min_DBH + min_DBH:Area_km +     # minimum DBH
GPP + GPP:Area_km +             # gross primary productivity
ANN_T + ANN_T:Area_km +         # mean annual temperature
ISO_T + ISO_T:Area_km +         # mean isothermality
MIN_P + MIN_P:Area_km +         # minimum precipitation in the driest quarter of the year
P_SEAS + P_SEAS:Area_km +       # mean precipitation seasonality
ALT_DIF + ALT_DIF:Area_km +     # altitude difference
ISLAND + ISLAND:Area_km         # insularity
SMOOTH.formula <- S ~
s(Lat, Lon, by=DAT_TYPE, bs="sos", k=14) + # smooth region effect
poly(Area_km, 3) +              # species-area relationship
Tree_dens + Tree_dens:Area_km + # tree density
min_DBH + min_DBH:Area_km +     # minimum DBH
GPP + GPP:Area_km +             # gross primary productivity
ANN_T + ANN_T:Area_km +         # mean annual temperature
ISO_T + ISO_T:Area_km +         # mean isothermality
MIN_P + MIN_P:Area_km +         # minimum precipitation in the driest quarter of the year
P_SEAS + P_SEAS:Area_km +       # mean precipitation seasonality
ALT_DIF + ALT_DIF:Area_km +     # altitude difference
ISLAND + ISLAND:Area_km         # insularity
################################################################################
# FIT THE MODELS using 'mgcv' function 'gam'
################################################################################
gam.REALM <- gam(REALM.formula, data=DAT, family="nb")
summary(gam.REALM)
##############################################################################
source("0_libraries_functions_settings.r")
source("4.1_Data_loading_standardization_and_centering.r")
# load the models
load("../Models/gam_REALM.Rdata")
load("../Models/gam_SMOOTH.Rdata")
load("../Models/brms_REALM.RData")
load("../Models/brms_SMOOTH.RData")
---------------------------------------------------------
# brm.REALM results
# ------------------------------------------------------------------------------
all.varnames.REALM <- rownames(summary(brm.REALM)$fixed)
data.frame(all.varnames.REALM)
all.vars.REALM <- model.matrix.gam(gam.REALM)
all.pars.REALM <- summary(brm.REALM)$fixed[,'Estimate']
REALM.hist.id <- c(2:7, 17:37)
hist.varnames.REALM <- all.varnames.REALM[REALM.hist.id]
hist.parnames.REALM <- paste("b", hist.varnames.REALM, sep="_")
hist.vars.REALM <- model.matrix.gam(gam.REALM)[,REALM.hist.id]
all.pars.REALM
all.varnames.REALM <- rownames(summary(brm.REALM)$fixed)
data.frame(all.varnames.REALM)
all.vars.REALM <- model.matrix.gam(gam.REALM)
all.pars.REALM <- summary(brm.REALM)$fixed[,'Estimate']
REALM.hist.id <- c(2:7, 17:37)
hist.varnames.REALM <- all.varnames.REALM[REALM.hist.id]
hist.parnames.REALM <- paste("b", hist.varnames.REALM, sep="_")
hist.vars.REALM <- model.matrix.gam(gam.REALM)[,REALM.hist.id]
hist.varnames.REALM
# ------------------------------------------------------------------------------
# EXTRACT ONE PARAMETER FROM THE BRMS FITTED OBJECT (BY NAME)
extract.par <- function(par.name, brm.fit)
{
n.iter <- summary(brm.fit)$iter
n.chains <- summary(brm.fit)$chains
n.thin <- summary(brm.fit)$thin
n.warm <- summary(brm.fit)$warmup
res <- list()
for(chain in 1:n.chains){
one.chain <- brm.fit$fit@sim$samples[[chain]][par.name][[1]]
res[[chain]] <- one.chain[((n.warm/n.thin)+1):length(one.chain)]
}
res <- unlist(res)
return(res)
}
# b <- extract.par("b_Intercept", brm.REALM)
# EXTRACT MULTIPLE PARAMETERS FROM THE BRMS FITTED OBJECT (BY NAMES)
extract.pars <- function(par.names, brm.fit)
{
res <- list()
for(par in par.names){
res[[par]] <- extract.par(par, brm.fit)
}
return(res)
}
#bb <- extract.pars(hist.parnames.REALM, brm.REALM)
# CHOOSE ONE SAMPLING ITERATION AND SAMPLE PARAMETER VALUES FROM THAT
draw.one <- function(par.list, i){
myfun <- function(x, i) x[i]
unlist(lapply(par.list, FUN=myfun, i=i))
}
#bbb <- draw.one(bb, 1)
# CALCULATE PREDICTION FOR EACH PARAMETER DRAW IN THE CHAIN
draw.all <- function(par.names, vars, brm.fit, probs=c(0.025, 0.25, 0.5,0.75, 0.975))
{
B <- extract.pars(par.names, brm.fit)
N <- length(B[[1]])
res <- matrix(nrow=nrow(vars), ncol=N)
for(i in 1:N){
b <- draw.one(B, i=i)
res[,i] <- vars %*% b
}
require(matrixStats)
res <- matrixStats::rowQuantiles(res, probs=probs)
return(res)
}
all.vars.REALM
all.pars.REALM
head(hist.vars.REALM)
data.frame(names(hist.vars.REALM), hist.parnames.REALM)
data.frame(colnames(hist.vars.REALM), hist.parnames.REALM)
all.varnames.REALM <- rownames(summary(brm.REALM)$fixed)
data.frame(all.varnames.REALM)
all.vars.REALM <- model.matrix.gam(gam.REALM)
all.pars.REALM <- summary(brm.REALM)$fixed[,'Estimate']
REALM.hist.id <- c(1:7, 17:37)
hist.varnames.REALM <- all.varnames.REALM[REALM.hist.id]
hist.parnames.REALM <- paste("b", hist.varnames.REALM, sep="_")
hist.vars.REALM <- model.matrix.gam(gam.REALM)[,REALM.hist.id]
prd.brm.REALM <- all.vars.REALM %*% all.pars.REALM
#prd.brm.REALM <- predict(brm.REALM, newdata=DAT, type="link")[,'Estimate']
res.brm.REALM <- prd.brm.REALM - log(DAT$S)
prd.history.REALM <- draw.all(par.names = hist.parnames.REALM,
vars = hist.vars.REALM,
brm.fit = brm.REALM)
resid.REALM <- prd.history.REALM[,'50%'] + res.brm.REALM
HIST <- data.frame(prd.history.REALM, DAT, resid.REALM)
p.hist.multi <- ggplot(HIST, aes(exp(Area_km*A.sd + A.mean), X50.)) +
geom_point(aes(exp(Area_km*A.sd + A.mean), resid.REALM),
colour="grey", shape=1) +
geom_linerange(aes(ymin=X2.5., ymax=X97.5., colour=REALM), alpha=0.5) +
geom_linerange(aes(ymin=X25., ymax=X75., colour=REALM), size=1) +
geom_line(aes(colour=REALM)) +
scale_y_continuous(minor_breaks = NULL) +
scale_x_continuous(trans = "log10",
minor_breaks = NULL,
breaks = c(0.01, 1, 100, 10000, 1000000),
labels = c("0.01", "1", "100", expression(10^4), expression(10^6))) +
xlab(expression("Area" ~ (km^2))) +
ylab("Region effect") +
scale_colour_brewer(palette = "Dark2", name="Realm") +
theme_bw()  +
theme(legend.position="none") +
facet_grid(. ~ REALM)
p.hist.multi
exp(3)
exp(1.5)
theme.legend <- theme(legend.position="right",#c(0.25,0.8),
legend.title = element_blank(),
legend.background = element_rect(fill="white",
size=0.2, linetype="solid",
colour ="black"))
p.hist.single <- ggplot(HIST, aes(exp(Area_km*A.sd + A.mean), X50.)) +
geom_linerange(aes(ymin=X2.5., ymax=X97.5., colour=REALM), alpha=0.4) +
geom_linerange(aes(ymin=X25., ymax=X75., colour=REALM), size=1) +
geom_line( aes(colour=REALM)) +
scale_colour_brewer(palette = "Dark2", name="Realm") +
scale_y_continuous(minor_breaks = NULL,
breaks = c(-3, -2, -1, 0, 1, 2, 3, 4, 5, 6 )) +
scale_x_continuous(trans = "log10",
minor_breaks = NULL,
breaks = c(0.01, 1, 100, 10000, 1000000),
labels = c("0.01", "1", "100", expression(10^4), expression(10^6))) +
xlab(expression("Area" ~ (km^2))) +
ylab("Region effect") +
theme_bw()+
theme.legend +
theme(plot.title = element_text(hjust = -0.125))
p.hist.single
REALM.hist.id <- c(2:7, 17:37)
hist.varnames.REALM <- all.varnames.REALM[REALM.hist.id]
hist.parnames.REALM <- paste("b", hist.varnames.REALM, sep="_")
hist.vars.REALM <- model.matrix.gam(gam.REALM)[,REALM.hist.id]
# ------------------------------------------------------------------------------
# EXTRACT ONE PARAMETER FROM THE BRMS FITTED OBJECT (BY NAME)
extract.par <- function(par.name, brm.fit)
{
n.iter <- summary(brm.fit)$iter
n.chains <- summary(brm.fit)$chains
n.thin <- summary(brm.fit)$thin
n.warm <- summary(brm.fit)$warmup
res <- list()
for(chain in 1:n.chains){
one.chain <- brm.fit$fit@sim$samples[[chain]][par.name][[1]]
res[[chain]] <- one.chain[((n.warm/n.thin)+1):length(one.chain)]
}
res <- unlist(res)
return(res)
}
# b <- extract.par("b_Intercept", brm.REALM)
# EXTRACT MULTIPLE PARAMETERS FROM THE BRMS FITTED OBJECT (BY NAMES)
extract.pars <- function(par.names, brm.fit)
{
res <- list()
for(par in par.names){
res[[par]] <- extract.par(par, brm.fit)
}
return(res)
}
#bb <- extract.pars(hist.parnames.REALM, brm.REALM)
# CHOOSE ONE SAMPLING ITERATION AND SAMPLE PARAMETER VALUES FROM THAT
draw.one <- function(par.list, i){
myfun <- function(x, i) x[i]
unlist(lapply(par.list, FUN=myfun, i=i))
}
#bbb <- draw.one(bb, 1)
# CALCULATE PREDICTION FOR EACH PARAMETER DRAW IN THE CHAIN
draw.all <- function(par.names, vars, brm.fit, probs=c(0.025, 0.25, 0.5,0.75, 0.975))
{
B <- extract.pars(par.names, brm.fit)
N <- length(B[[1]])
res <- matrix(nrow=nrow(vars), ncol=N)
for(i in 1:N){
b <- draw.one(B, i=i)
res[,i] <- vars %*% b
}
require(matrixStats)
res <- matrixStats::rowQuantiles(res, probs=probs)
return(res)
}
################################################################################
# SUMMARIZE THE REALM PREDICTIONS
################################################################################
prd.brm.REALM <- all.vars.REALM %*% all.pars.REALM
#prd.brm.REALM <- predict(brm.REALM, newdata=DAT, type="link")[,'Estimate']
res.brm.REALM <- prd.brm.REALM - log(DAT$S)
prd.history.REALM <- draw.all(par.names = hist.parnames.REALM,
vars = hist.vars.REALM,
brm.fit = brm.REALM)
resid.REALM <- prd.history.REALM[,'50%'] + res.brm.REALM
HIST <- data.frame(prd.history.REALM, DAT, resid.REALM)
p.hist.multi <- ggplot(HIST, aes(exp(Area_km*A.sd + A.mean), X50.)) +
geom_point(aes(exp(Area_km*A.sd + A.mean), resid.REALM),
colour="grey", shape=1) +
geom_linerange(aes(ymin=X2.5., ymax=X97.5., colour=REALM), alpha=0.5) +
geom_linerange(aes(ymin=X25., ymax=X75., colour=REALM), size=1) +
geom_line(aes(colour=REALM)) +
scale_y_continuous(minor_breaks = NULL) +
scale_x_continuous(trans = "log10",
minor_breaks = NULL,
breaks = c(0.01, 1, 100, 10000, 1000000),
labels = c("0.01", "1", "100", expression(10^4), expression(10^6))) +
xlab(expression("Area" ~ (km^2))) +
ylab("Region effect") +
scale_colour_brewer(palette = "Dark2", name="Realm") +
theme_bw()  +
theme(legend.position="none") +
facet_grid(. ~ REALM)
p.hist.multi
theme.legend <- theme(legend.position="right",#c(0.25,0.8),
legend.title = element_blank(),
legend.background = element_rect(fill="white",
size=0.2, linetype="solid",
colour ="black"))
p.hist.single <- ggplot(HIST, aes(exp(Area_km*A.sd + A.mean), X50.)) +
geom_linerange(aes(ymin=X2.5., ymax=X97.5., colour=REALM), alpha=0.4) +
geom_linerange(aes(ymin=X25., ymax=X75., colour=REALM), size=1) +
geom_line( aes(colour=REALM)) +
scale_colour_brewer(palette = "Dark2", name="Realm") +
scale_y_continuous(minor_breaks = NULL,
breaks = c(-3, -2, -1, 0, 1, 2, 3, 4, 5, 6 )) +
scale_x_continuous(trans = "log10",
minor_breaks = NULL,
breaks = c(0.01, 1, 100, 10000, 1000000),
labels = c("0.01", "1", "100", expression(10^4), expression(10^6))) +
xlab(expression("Area" ~ (km^2))) +
ylab("Region effect") +
theme_bw()+
theme.legend +
theme(plot.title = element_text(hjust = -0.125))
p.hist.single
all.pars.REALM
summary(gam.REALM)
DAT
prd.brm.REALM <- all.vars.REALM %*% all.pars.REALM
#prd.brm.REALM <- predict(brm.REALM, newdata=DAT, type="link")[,'Estimate']
res.brm.REALM <- prd.brm.REALM - log(DAT$S)
prd.history.REALM <- draw.all(par.names = hist.parnames.REALM,
vars = hist.vars.REALM,
brm.fit = brm.REALM)
resid.REALM <- prd.history.REALM[,'50%'] + res.brm.REALM
HIST <- data.frame(prd.history.REALM, DAT, resid.REALM)
p.hist.multi <- ggplot(HIST, aes(exp(Area_km*A.sd + A.mean), X50.)) +
geom_point(aes(exp(Area_km*A.sd + A.mean), resid.REALM),
colour="grey", shape=1) +
geom_linerange(aes(ymin=X2.5., ymax=X97.5., colour=REALM), alpha=0.5) +
geom_linerange(aes(ymin=X25., ymax=X75., colour=REALM), size=1) +
geom_line(aes(colour=REALM)) +
scale_y_continuous(minor_breaks = NULL) +
scale_x_continuous(trans = "log10",
minor_breaks = NULL,
breaks = c(0.01, 1, 100, 10000, 1000000),
labels = c("0.01", "1", "100", expression(10^4), expression(10^6))) +
xlab(expression("Area" ~ (km^2))) +
ylab("Region effect") +
scale_colour_brewer(palette = "Dark2", name="Realm") +
theme_bw()  +
theme(legend.position="none") +
facet_grid(. ~ REALM)
p.hist.multi
theme.legend <- theme(legend.position="right",#c(0.25,0.8),
legend.title = element_blank(),
legend.background = element_rect(fill="white",
size=0.2, linetype="solid",
colour ="black"))
p.hist.single <- ggplot(HIST, aes(exp(Area_km*A.sd + A.mean), X50.)) +
geom_linerange(aes(ymin=X2.5., ymax=X97.5., colour=REALM), alpha=0.4) +
geom_linerange(aes(ymin=X25., ymax=X75., colour=REALM), size=1) +
geom_line( aes(colour=REALM)) +
scale_colour_brewer(palette = "Dark2", name="Realm") +
scale_y_continuous(minor_breaks = NULL,
breaks = c(-3, -2, -1, 0, 1, 2, 3, 4, 5, 6 )) +
scale_x_continuous(trans = "log10",
minor_breaks = NULL,
breaks = c(0.01, 1, 100, 10000, 1000000),
labels = c("0.01", "1", "100", expression(10^4), expression(10^6))) +
xlab(expression("Area" ~ (km^2))) +
ylab("Region effect") +
theme_bw()+
theme.legend +
theme(plot.title = element_text(hjust = -0.125))
p.hist.single
p.hist.single <- ggplot(HIST, aes(exp(Area_km*A.sd + A.mean), X50.)) +
geom_linerange(aes(ymin=X2.5., ymax=X97.5., colour=REALM), alpha=0.4) +
geom_linerange(aes(ymin=X25., ymax=X75., colour=REALM), size=1) +
geom_line( aes(colour=REALM)) +
scale_colour_brewer(palette = "Dark2", name="Realm") +
scale_y_continuous(minor_breaks = NULL,
breaks = c(-3, -2, -1, 0, 1, 2, 3, 4, 5, 6 )) +
scale_x_continuous(trans = "log10",
minor_breaks = NULL,
breaks = c(0.01, 1, 100, 10000, 1000000),
labels = c("0.01", "1", "100", expression(10^4), expression(10^6))) +
xlab(expression("Area" ~ (km^2))) +
ylab("Region effect") +
theme_bw()+
theme.legend +
theme(plot.title = element_text(hjust = -0.125)) +
geom_vline(xintercept = 0.5)
p.hist.single
p.hist.single <- ggplot(HIST, aes(exp(Area_km*A.sd + A.mean), X50.)) +
geom_linerange(aes(ymin=X2.5., ymax=X97.5., colour=REALM), alpha=0.4) +
geom_linerange(aes(ymin=X25., ymax=X75., colour=REALM), size=1) +
geom_line( aes(colour=REALM)) +
scale_colour_brewer(palette = "Dark2", name="Realm") +
scale_y_continuous(minor_breaks = NULL,
breaks = c(-3, -2, -1, 0, 1, 2, 3, 4, 5, 6 )) +
scale_x_continuous(trans = "log10",
minor_breaks = NULL,
breaks = c(0.01, 1, 100, 10000, 1000000),
labels = c("0.01", "1", "100", expression(10^4), expression(10^6))) +
xlab(expression("Area" ~ (km^2))) +
ylab("Region effect") +
theme_bw()+
theme.legend +
theme(plot.title = element_text(hjust = -0.125)) +
geom_vline(xintercept = 30000)
p.hist.single
exp(3.4 + 2.7)
exp(3.4 + 1.8)
exp(3.4 + 1.8) - exp(3.4 + 1.8)
exp(3.4 + 2.7) - exp(3.4 + 1.8)
exp(3.4 + 2.7) / exp(3.4 + 1.8)
exp(2.7) / exp(1.8)
