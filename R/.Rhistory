#plot.title = element_text(hjust = 0),
plot.subtitle = element_text(vjust=-3),
panel.background=element_blank(),
panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
plot.gr.S <- ggplot(grid5.mlf, aes(long, lat, group=group)) +
geom_polygon(data=LINES,  aes(long, lat, group=group),
colour="darkgrey", size=0.2) +
geom_polygon(data=MAINL, aes(long, lat, group=group),
fill="white", colour=NA, size=.2) +
geom_polygon(aes(fill=S.y)) +
geom_polygon(data=MAINL, aes(long, lat, group=group),
fill=NA, colour="black", size=.2) +
scale_fill_distiller(palette = "Spectral",
name=expression(S),
#limits=c(1,5000),
trans="log10") +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
xlab("") + ylab("") +
#ggtitle("A") +
labs(title = "a") +
blank.theme + theme(plot.title = element_text(face=quote(bold)))
plot.gr.S
tiff("../Figures/Fig_external_validation.tif", width=4000, height=1400, res=350,
compression = "lzw")
grid.arrange(plot.gr.S, p.valid, ncol=2, nrow = 1, widths = c(0.65, 0.35))
dev.off()
RB <- read.csv("../Data/VALIDATION/RAINBIO_Africa_SN_grid5.csv")
EU <- read.csv("../Data/VALIDATION/EUForest_SN_grid5.csv")
BI <- read.csv("../Data/VALIDATION/BIEN_woody_grid5.csv")
# load the saved SMOOTH model that will be used for the global predictions
library(mgcv)
load("../Models/gam_SMOOTH.Rdata")
load("../Models/brms_SMOOTH.RData")
# read the data
grid5 <- readOGR(dsn = "../Data/GRIDS", layer = "hex5_with_environment")
grid5 <- spTransform(x = grid5, CRSobj = WGS84)
grid5@data <- data.frame(grid5@data, ELONGATION = 1)
# tree density at the grid level
grid5$Tree_dens <- (grid5$TREE_DENS + 1) / grid5$LandArea
grid5@data <- data.frame(grid5@data, min_DBH = 0, DAT_TYPE = "Country")
grid5.dat <- dplyr::select(grid5@data, Area_km = LandArea, Tree_dens, min_DBH,
GPP, ANN_T, ISO_T, MIN_P, P_SEAS, ALT_DIF,
INSULARITY, ELONGATION, Lat, Lon, DAT_TYPE) %>%
mutate(Area_km = log(Area_km), Tree_dens=log(Tree_dens))
# get the scaling constants that were used to scale the raw plot and country data:
scal.tab <- read.csv("scale_tab.csv")
scal.tab <- scal.tab[scal.tab$var %in% c("ET","WARM_T") == FALSE,]
grid5.dat[,1:9] <- scale(grid5.dat[,1:9],
center = scal.tab$centr,
scale = scal.tab$scale)
# predict S from the model SMOOTH
grid.pred.S.brm <- data.frame(predict(brm.SMOOTH,
newdata = grid5.dat,
probs = c(0.025, 0.25, 0.5, 0.75, 0.975)))
REALM.formula <- S ~ REALM + poly(Area_km,3):REALM +
Tree_dens + Tree_dens:Area_km +
min_DBH + min_DBH:Area_km +
GPP + GPP:Area_km +
ANN_T + ANN_T:Area_km +
ISO_T + ISO_T:Area_km +
MIN_P + MIN_P:Area_km +
P_SEAS + P_SEAS:Area_km +
ALT_DIF + ALT_DIF:Area_km +
ISLAND + ISLAND:Area_km +
ELONGATION + ELONGATION:Area_km
#
################################################################################
# LOAD THE DATA AND THE PACKAGES
################################################################################
source("0_libraries_functions_settings.r")
source("4_Data_loading_standardization_and_centering.r")
################################################################################
# THE MODEL FORMULAS
################################################################################
REALM.formula <- S ~ REALM + poly(Area_km,3):REALM +
Tree_dens + Tree_dens:Area_km +
min_DBH + min_DBH:Area_km +
GPP + GPP:Area_km +
ANN_T + ANN_T:Area_km +
ISO_T + ISO_T:Area_km +
MIN_P + MIN_P:Area_km +
P_SEAS + P_SEAS:Area_km +
ALT_DIF + ALT_DIF:Area_km +
ISLAND + ISLAND:Area_km +
ELONGATION + ELONGATION:Area_km
gam.REALM <- gam(REALM.formula, data=DAT, family="nb")
summary(gam.REALM)
# save to a file
save(gam.REALM, file="../Models/gam_REALM.Rdata")
# order the data frame by regions and area
DAT <- DAT[order(DAT$REALM),]
# load the data
PLT <- read.csv("../Data/Main_dataset_full_detail.csv")
# calculate tree density (note the x+1 step!!)
PLT$Tree_dens <- (PLT$N + 1) / PLT$Area_km
# select only the variables of interest from the larger data.frame
DAT <- dplyr::select(PLT, S, Area_km, Tree_dens, min_DBH=min_DBH_cm,
GPP, ET, ANN_T, WARM_T, ISO_T, MIN_P, P_SEAS, ALT_DIF, ELONGATION,
INSULARITY, ISLAND, REALM=REALM_PK, Lat, Lon, DAT_TYPE, Loc_ID)
# order the data frame by regions and area
DAT <- DAT[order(DAT$REALM),]
# transform area and tree density
DAT$Area_km <- log(DAT$Area_km)
DAT$Tree_dens <- log(DAT$Tree_dens)
# remove NAs
DAT <- DAT[rowSums(is.na(DAT)) == 0,]
# mean and sd of Area (will be used later to bring these to their origina scale)
A.mean <- mean(DAT$Area_km)
A.sd <- sd(DAT$Area_km)
# see column names and their numbers
data.frame(names(DAT))
################################################################################
# LOAD THE DATA AND THE PACKAGES
################################################################################
source("0_libraries_functions_settings.r")
source("4_Data_loading_standardization_and_centering.r")
################################################################################
# THE MODEL FORMULAS
################################################################################
REALM.formula <- S ~ REALM + poly(Area_km,3):REALM +
Tree_dens + Tree_dens:Area_km +
min_DBH + min_DBH:Area_km +
GPP + GPP:Area_km +
ANN_T + ANN_T:Area_km +
ISO_T + ISO_T:Area_km +
MIN_P + MIN_P:Area_km +
P_SEAS + P_SEAS:Area_km +
ALT_DIF + ALT_DIF:Area_km +
INSULARITY + INSULARITY:Area_km +
ELONGATION + ELONGATION:Area_km
gam.REALM <- gam(REALM.formula, data=DAT, family="nb")
summary(gam.REALM)
# save to a file
save(gam.REALM, file="../Models/gam_REALM.Rdata")
brm.REALM <- brm(REALM.formula, family="negbinomial", data=DAT,
cores=3,
seed=12355,
chains=3, iter=3000, warmup=1000, thin=10)
# save to a file
save(brm.REALM, file="../Models/brms_REALM.RData")
source("0_libraries_functions_settings.r")
source("4_Data_loading_standardization_and_centering.r")
load("../Models/gam_REALM.Rdata")
load("../Models/gam_SMOOTH.Rdata")
load("../Models/brms_REALM.RData")
load("../Models/brms_SMOOTH.RData")
prd.gam <- predict(gam.REALM, type="response")
prd <- predict(brm.REALM, newdata=DAT)[,'Estimate']
plot(prd, prd.gam)
abline(a=0, b=1)
# ------------------------------------------------------------------------------
# TRACEPLOTS and CATERPILLAR PLOTS of model parameters
pars.REALM <- rownames(data.frame(summary(brm.REALM$fit)[1]))[1:46]
pars.SMOOTH <- rownames(data.frame(summary(brm.SMOOTH$fit)[1]))[1:51]
# traceplots - this indicate if the convergence is good (which it is)
# save to a file
png("../Figures/traceplot_REALM.png", width = 2000, height=2000, res=150)
rstan::traceplot(brm.REALM$fit, pars=pars.REALM)
dev.off()
# save to a file
png("../Figures/traceplot_SMOOTH.png", width = 2000, height=2000, res=150)
rstan::traceplot(brm.SMOOTH$fit, pars=pars.SMOOTH)
dev.off()
# caterpillar plots
# save to a file
png("../Figures/caterpillar_REALM.png", width = 2000, height=2000, res=150)
rstan::plot(brm.REALM$fit, pars=pars.REALM)
dev.off()
png("../Figures/caterpillar_SMOOTH.png", width = 2000, height=2000, res=150)
rstan::plot(brm.SMOOTH$fit, pars=pars.SMOOTH)
dev.off()
REALM.formula <- S ~ REALM + poly(Area_km,3):REALM +
Tree_dens + Tree_dens:Area_km +
min_DBH + min_DBH:Area_km +
GPP + GPP:Area_km +
ANN_T + ANN_T:Area_km +
ISO_T + ISO_T:Area_km +
MIN_P + MIN_P:Area_km +
P_SEAS + P_SEAS:Area_km +
ALT_DIF + ALT_DIF:Area_km +
INSULARITY + INSULARITY:Area_km +
ELONGATION + ELONGATION:Area_km
gam.REALM <- gam(REALM.formula, data=DAT, family="nb")
summary(gam.REALM)
REALM.formula <- S ~ REALM + poly(Area_km,3):REALM +
Tree_dens + Tree_dens:Area_km +
min_DBH + min_DBH:Area_km +
GPP + GPP:Area_km +
ANN_T + ANN_T:Area_km +
ISO_T + ISO_T:Area_km +
MIN_P + MIN_P:Area_km +
P_SEAS + P_SEAS:Area_km +
ALT_DIF + ALT_DIF:Area_km +
#INSULARITY + INSULARITY:Area_km +
ELONGATION + ELONGATION:Area_km
gam.REALM <- gam(REALM.formula, data=DAT, family="nb")
summary(gam.REALM)
gam.REALM <- gam(REALM.formula, data=DAT, family="nb")
summary(gam.REALM)
REALM.formula <- S ~ REALM + poly(Area_km,3):REALM +
Tree_dens + Tree_dens:Area_km +
min_DBH + min_DBH:Area_km +
GPP + GPP:Area_km +
ANN_T + ANN_T:Area_km +
ISO_T + ISO_T:Area_km +
MIN_P + MIN_P:Area_km +
P_SEAS + P_SEAS:Area_km +
ALT_DIF + ALT_DIF:Area_km #+
#INSULARITY + INSULARITY:Area
gam.REALM <- gam(REALM.formula, data=DAT, family="nb")
summary(gam.REALM)
REALM.formula <- S ~ REALM + poly(Area_km,3):REALM +
Tree_dens + Tree_dens:Area_km +
min_DBH + min_DBH:Area_km +
GPP + GPP:Area_km +
ANN_T + ANN_T:Area_km +
ISO_T + ISO_T:Area_km +
MIN_P + MIN_P:Area_km +
P_SEAS + P_SEAS:Area_km +
ALT_DIF + ALT_DIF:Area_km +
ISLAND + ISLAND:Area_km
gam.REALM <- gam(REALM.formula, data=DAT, family="nb")
summary(gam.REALM)
REALM.formula <- S ~ REALM + poly(Area_km,3):REALM +
Tree_dens + Tree_dens:Area_km +
min_DBH + min_DBH:Area_km +
GPP + GPP:Area_km +
ANN_T + ANN_T:Area_km +
ISO_T + ISO_T:Area_km +
MIN_P + MIN_P:Area_km +
P_SEAS + P_SEAS:Area_km +
ALT_DIF + ALT_DIF:Area_km +
ISLAND + ISLAND:Area_km
gam.REALM <- gam(REALM.formula, data=DAT, family="nb")
summary(gam.REALM)
REALM.formula <- S ~ REALM + poly(Area_km,3):REALM +
Tree_dens + Tree_dens:Area_km +
min_DBH + min_DBH:Area_km +
GPP + GPP:Area_km +
ANN_T + ANN_T:Area_km +
ISO_T + ISO_T:Area_km +
MIN_P + MIN_P:Area_km +
P_SEAS + P_SEAS:Area_km +
ALT_DIF + ALT_DIF:Area_km +
#ISLAND + ISLAND:Area_km
INSULARITY + INSULARITY:Area_km +
ELONGATION + ELONGATION:Area_km
gam.REALM <- gam(REALM.formula, data=DAT, family="nb")
summary(gam.REALM)
REALM.formula <- S ~ REALM + poly(Area_km,3):REALM +
Tree_dens + Tree_dens:Area_km +
min_DBH + min_DBH:Area_km +
GPP + GPP:Area_km +
ANN_T + ANN_T:Area_km +
ISO_T + ISO_T:Area_km +
MIN_P + MIN_P:Area_km +
P_SEAS + P_SEAS:Area_km +
ALT_DIF + ALT_DIF:Area_km +
#ISLAND + ISLAND:Area_km
#INSULARITY + INSULARITY:Area_km +
ELONGATION + ELONGATION:Area_km
gam.REALM <- gam(REALM.formula, data=DAT, family="nb")
summary(gam.REALM)
REALM.formula <- S ~ REALM + poly(Area_km,3):REALM +
Tree_dens + Tree_dens:Area_km +
min_DBH + min_DBH:Area_km +
GPP + GPP:Area_km +
ANN_T + ANN_T:Area_km +
ISO_T + ISO_T:Area_km +
MIN_P + MIN_P:Area_km +
P_SEAS + P_SEAS:Area_km +
ALT_DIF + ALT_DIF:Area_km +
ISLAND + ISLAND:Area_km
REALM.formula <- S ~ REALM + poly(Area_km,3):REALM +
Tree_dens + Tree_dens:Area_km +
min_DBH + min_DBH:Area_km +
GPP + GPP:Area_km +
ANN_T + ANN_T:Area_km +
ISO_T + ISO_T:Area_km +
MIN_P + MIN_P:Area_km +
P_SEAS + P_SEAS:Area_km +
ALT_DIF + ALT_DIF:Area_km +
ISLAND + ISLAND:Area_km +
#INSULARITY + INSULARITY:Area_km +
ELONGATION + ELONGATION:Area_km
gam.REALM <- gam(REALM.formula, data=DAT, family="nb")
summary(gam.REALM)
REALM.formula <- S ~ REALM + poly(Area_km,3):REALM +
Tree_dens + Tree_dens:Area_km +
min_DBH + min_DBH:Area_km +
GPP + GPP:Area_km +
ANN_T + ANN_T:Area_km +
ISO_T + ISO_T:Area_km +
MIN_P + MIN_P:Area_km +
P_SEAS + P_SEAS:Area_km +
ALT_DIF + ALT_DIF:Area_km +
ISLAND + ISLAND:Area_km# +
#INSULARITY + INSULARITY:Area_k
gam.REALM <- gam(REALM.formula, data=DAT, family="nb")
summary(gam.REALM)
REALM.formula <- S ~ REALM + poly(Area_km,3):REALM +
Tree_dens + Tree_dens:Area_km +
min_DBH + min_DBH:Area_km +
GPP + GPP:Area_km +
ANN_T + ANN_T:Area_km +
ISO_T + ISO_T:Area_km +
MIN_P + MIN_P:Area_km +
P_SEAS + P_SEAS:Area_km +
ALT_DIF + ALT_DIF:Area_km +
#ISLAND + ISLAND:Area_km# +
INSULARITY + INSULARITY:Area_km #+
gam.REALM <- gam(REALM.formula, data=DAT, family="nb")
summary(gam.REALM)
SMOOTH.formula <- S ~ s(Lat, Lon, by=DAT_TYPE, bs="sos", k=14) +
poly(Area_km, 3) +
Tree_dens + Tree_dens:Area_km +
min_DBH + min_DBH:Area_km +
GPP + GPP:Area_km +
ANN_T + ANN_T:Area_km +
ISO_T + ISO_T:Area_km +
MIN_P + MIN_P:Area_km +
P_SEAS + P_SEAS:Area_km +
ALT_DIF + ALT_DIF:Area_km +
INSULARITY + INSULARITY:Area_km +
ELONGATION + ELONGATION:Area_km
gam.SMOOTH <- gam(SMOOTH.formula, data = DAT, family="nb")
summary(gam.SMOOTH)
REALM.formula <- S ~ REALM + poly(Area_km,3):REALM +
Tree_dens + Tree_dens:Area_km +
min_DBH + min_DBH:Area_km +
GPP + GPP:Area_km +
ANN_T + ANN_T:Area_km +
ISO_T + ISO_T:Area_km +
MIN_P + MIN_P:Area_km +
P_SEAS + P_SEAS:Area_km +
ALT_DIF + ALT_DIF:Area_km +
ISLAND + ISLAND:Area_km  +
#INSULARITY + INSULARITY:Area_km #+
ELONGATION + ELONGATION:Area_km
gam.REALM <- gam(REALM.formula, data=DAT, family="nb")
summary(gam.REALM)
# clean the workspace and load the libraries
source("0_libraries_functions_settings.r")
# ------------------------------------------------------------------------------
# read the raw PLOT data
PLOTS <- read.csv("../Data/PLOTS/PLOTS_all_data_raw_tab_delimited.txt",
sep="\t", header=TRUE)
# convert the coordinates to 'sp' object
plots <- SpatialPointsDataFrame(coords=data.frame(PLOTS$Lon, PLOTS$Lat),
data = PLOTS,
proj4string=CRS(WGS84))
# read the COUNTRY data (as a shapefile with data in the attribute table)
COUNTR.shp <- readOGR(dsn="../Data/COUNTRIES", layer = "COUNTRIES")
COUNTR.shp <- spTransform(x = COUNTR.shp, CRSobj = WGS84)
## extract plots
MAINL <- readOGR(dsn = "/media/pk33loci/Elements/GIS_data/Boundaries/GLOBAL_SHORELINE",
layer = "main_landmasses")
MAINL <- spTransform(MAINL,  CRSobj = WGS84)
CONTS <- over(x=plots, y=MAINL)
is.island <- is.na(CONTS$continent == "<NA>")*1
plots@data$ISL_LS <- ifelse(is.island == 1, "island", "mainland")
## extract countries
CONTS <- over(SpatialPoints(coordinates(COUNTR.shp), proj4string=CRS(WGS84)), y=MAINL)
is.island <- is.na(CONTS$continent == "<NA>")*1
COUNTR.shp@data$ISL_LS <- ifelse(is.island == 1, "island", "mainland")
# ----------------------
# UPDATED APPROACH, IN WHICH SHELF ISLANDS ARE TREATED
# AS EFFECTIVELY MAINLANDS
ISLAND <- raster("/media/pk33loci/Elements/GIS_data/ISLANDNESS/rasters/ISLAND_clean.tif")
ALL.LAND <- raster("/media/pk33loci/Elements/GIS_data/ISLANDNESS/rasters/LAND_clean.tif")
LAND_AND_SHELF <- ALL.LAND - ISLAND
# plots
is.mainland.plots <- raster::extract(x = LAND_AND_SHELF , y = plots)
is.island.plots <- ifelse(is.mainland.plots == 1, "mainland", "island")
plots@data$ISLAND_ST <- is.island.plots
# manually extracted values for COUNTRIES
is.isl.countr <- read.csv("../Data/COUNTRIES/A_Insularity_COUNTRIES.csv")[,c("NAME","ISL_ST")]
COUNTR.shp@data <- dplyr::left_join(COUNTR.shp@data, is.isl.countr, by="NAME")
# YET ANOTHER APPROACH, IN WHICH SHELF ISLANDS ARE TREATED
# AS EFFECTIVELY MAINLANDS, AND DISJUNCT COUNTRIES ARE ALSO FLAGGED
# plots
is.mainland.plots <- raster::extract(x = LAND_AND_SHELF , y = plots)
is.island.plots <- ifelse(is.mainland.plots == 1, "mainland", "island")
plots@data$ISL_DIS <- is.island.plots
# manually extracted values for COUNTRIES
is.isl.countr <- read.csv("../Data/COUNTRIES/A_Insularity_COUNTRIES.csv")[,c("NAME","ISL_DIS")]
COUNTR.shp@data <- dplyr::left_join(COUNTR.shp@data, is.isl.countr, by="NAME")
head(COUNTR.shp)
head(plots)
source("0_roundness_or_elongation_metrics_functions.r")
elong.cntr <- vector()
for(i in 1:nrow(COUNTR.shp))
{
cat("*")
pol <- COUNTR.shp[i,]
elong.cntr[i] <- round(elongation.sample(pol), 3)
}
COUNTR.shp@data <- data.frame(COUNTR.shp@data, ELONG = elong.cntr)
head(COUNTR.shp)
# clean the workspace and load the libraries
source("0_libraries_functions_settings.r")
# ------------------------------------------------------------------------------
# load the mainland layer (i.e. everyting except for islands)
MAINL <- readOGR(dsn = "/media/pk33loci/Elements/GIS_data/Boundaries/GLOBAL_SHORELINE",
layer = "main_landmasses")
proj4string(MAINL) <- WGS84
# ------------------------------------------------------------------------------
# LOAD THE HEXAGONAL GRID THAT WILL BE USED FOR PREDICTIONS
grid5 <- readOGR(dsn="../Data/GRIDS", layer = "hex5")
grid5 <- spTransform(grid5, CRSobj = WGS84)
gr.coords <- data.frame(coordinates(grid5))
names(gr.coords) <- c("Lon", "Lat")
grid5@data <- data.frame(grid5@data, gr.coords)
## OLD APPROACH WHERE TRUE ISLANDS AND SHELF ILANDS WERE ALL LUMPED TOGETHER
MAINL <- readOGR(dsn = "/media/pk33loci/Elements/GIS_data/Boundaries/GLOBAL_SHORELINE",
layer = "main_landmasses")
MAINL <- spTransform(MAINL,  CRSobj = WGS84)
# extract points for predictions
CONTS <- over(x=pts, y=MAINL)
is.island <- is.na(CONTS$continent == "<NA>")*1
pts@data$ISL_LS <- is.island
plot(pts, col=pts@data$ISLAND+1); plot(MAINL, add=T)
# calculate the ISLAND status of the hexagonal cells
hexISL <- 1 - grid5$MainlArea/grid5$LandArea
hexISL <- ifelse(hexISL > 0.9, 1, 0)
grid5@data <- data.frame(grid5@data, ISL_LS=hexISL)
pt.coords <- read.csv(file="../Data/GRIDS/Fine_points.csv")
pts <- SpatialPointsDataFrame(pt.coords,
proj4string=CRS(WGS84),
data=data.frame(ptID = paste("pt", 1:nrow(pt.coords), sep="")))
pts@data <- data.frame(pts@data, pt.coords)
MAINL <- readOGR(dsn = "/media/pk33loci/Elements/GIS_data/Boundaries/GLOBAL_SHORELINE",
layer = "main_landmasses")
MAINL <- spTransform(MAINL,  CRSobj = WGS84)
# extract points for predictions
CONTS <- over(x=pts, y=MAINL)
is.island <- is.na(CONTS$continent == "<NA>")*1
pts@data$ISL_LS <- is.island
plot(pts, col=pts@data$ISLAND+1); plot(MAINL, add=T)
# calculate the ISLAND status of the hexagonal cells
hexISL <- 1 - grid5$MainlArea/grid5$LandArea
hexISL <- ifelse(hexISL > 0.9, 1, 0)
grid5@data <- data.frame(grid5@data, ISL_LS=hexISL)
## OLD APPROACH WHERE TRUE ISLANDS AND SHELF ILANDS WERE ALL LUMPED TOGETHER
MAINL <- readOGR(dsn = "/media/pk33loci/Elements/GIS_data/Boundaries/GLOBAL_SHORELINE",
layer = "main_landmasses")
MAINL <- spTransform(MAINL,  CRSobj = WGS84)
# extract points for predictions
CONTS <- over(x=pts, y=MAINL)
is.island <- is.na(CONTS$continent == "<NA>")*1
pts@data$ISL_LS <- is.island
head(pts@data)
plot(pts, col=pts@data$ISLAND+1); plot(MAINL, add=T)
plot(pts, col=pts@data$ISLAND+1)
head(pts)
class(pts)
plot(pts)
plot(pts, col=pts@data$ISL_LS+1); plot(MAINL, add=T)
# calculate the ISLAND status of the hexagonal cells
hexISL <- 1 - grid5$MainlArea/grid5$LandArea
hexISL <- ifelse(hexISL > 0.9, 1, 0)
grid5@data <- data.frame(grid5@data, ISL_LS=hexISL)
hexISL
# calculate the ISLAND status of the hexagonal cells
hexISL <- 1 - grid5$MainlArea/grid5$LandArea
hexISL
is.island.plots <- raster::extract(x = LAND_AND_SHELF, y = pts)
ISLAND <- raster("/media/pk33loci/Elements/GIS_data/ISLANDNESS/rasters/ISLAND_clean.tif")
ALL.LAND <- raster("/media/pk33loci/Elements/GIS_data/ISLANDNESS/rasters/LAND_clean.tif")
LAND_AND_SHELF <- ALL.LAND - ISLAND
is.island.plots <- raster::extract(x = LAND_AND_SHELF, y = pts)
is.island.plots <- ifelse(is.island.plots == 1, "island", "mainland")
ISLAND <- raster("/media/pk33loci/Elements/GIS_data/ISLANDNESS/rasters/ISLAND_clean.tif")
ALL.LAND <- raster("/media/pk33loci/Elements/GIS_data/ISLANDNESS/rasters/LAND_clean.tif")
LAND_AND_SHELF <- ALL.LAND - ISLAND
is.island.plots <- raster::extract(x = LAND_AND_SHELF, y = pts)
is.island.plots <- ifelse((is.island.plots == 0) * 1, "island", "mainland")
pts@data$ISL_ST <- is.island.plots
is.mainl.hex <- raster::extract(x = LAND_AND_SHELF, y = grid5, fun = max)
is.isl.hex <- as.vector((is.mainl.hex == 0) * 1)
is.isl.hex <- ifelse(is.isl.hex == 1, "island", "mainland")
grid5@data$ISL_ST <- is.isl.hex
head(grid5$data)
head(grid5@data)
spplot(grid5@data)
spplot(grid5, zcol="ISL_ST")
grid5@data$ISL_ST <- as.factor(is.isl.hex)
spplot(grid5, zcol="ISL_ST")
pts@data$ISL_ST <- as.farctor(is.island.plots)
pts@data$ISL_ST <- as.factor(is.island.plots)
spplot(pts, zcol="ISL_ST")
is.island.plots <- raster::extract(x = ISLAND, y = pts)
is.island.plots <- ifelse(is.island.plots == 1, "island", "mainland")
pts@data$ISL_ST <- as.factor(is.island.plots)
spplot(pts, zcol="ISL_ST")
ISLAND <- raster("/media/pk33loci/Elements/GIS_data/ISLANDNESS/rasters/ISLAND_clean.tif")
SHELF <- raster("/media/pk33loci/Elements/GIS_data/ISLANDNESS/rasters/SHELF_clean.tif")
ALL.LAND <- raster("/media/pk33loci/Elements/GIS_data/ISLANDNESS/rasters/LAND_clean.tif")
LAND_AND_SHELF <- ALL.LAND - ISLAND
LAND_AND_SHELF <- ALL.LAND - ISLAND
ISLAND_AND_SHELF <- ISLAND + SHELF
ISLAND_AND_SHELF[ISLAND_AND_SHELF > 1] <- 1
plot(ISLAND_AND_SHELF)
unique(ISLAND_AND_SHELF)
is.island.plots <- raster::extract(x = ISLAND_AND_SHELF, y = pts)
is.island.plots <- ifelse(is.island.plots == 1, "island", "mainland")
pts@data$ISL_ST <- as.factor(is.island.plots)
spplot(pts, zcol="ISL_LS")
source("3_Extract_environment_for_PLOTS_and_COUNTRIES.r")
source("3_Extract_environment_for_prediction_grids.r")
