geom_line( aes(colour=REALM)) +
scale_colour_brewer(palette = "Dark2", name="Realm") +
scale_y_continuous(minor_breaks = NULL) +
scale_x_continuous(trans = "log10",
minor_breaks = NULL,
breaks = c(0.01, 1, 100, 10000, 1000000),
labels = c("0.01", "1", "100", expression(10^4), expression(10^6))) +
xlab(expression("Area" ~ (km^2))) +
ylab("Region effect") +
theme_bw()+
theme.legend +
theme(plot.title = element_text(hjust = -0.125))
p.hist.single
# Figure for the main text - save to a file
pdf("../Figures/region_effects_ovelaid_REALM.pdf", width=6, height=4)
p.hist.single
dev.off()
# Figure for supplementary material - save to a file
tiff("../Figures/region_effects_individually_REALM.tif",
width=2500, height=600, res=250,
compression = "lzw")
p.hist.multi
dev.off()
################################################################################
#  TRIPHASIC SAR CURVE FROM THE SMOOTH PREDICTIONS
################################################################################
prd.area.SMOOTH <- draw.all(par.names = area.parnames.SMOOTH,
vars = area.vars.SMOOTH,
brm.fit = brm.SMOOTH)
partial.res.area <- prd.area.SMOOTH + residuals(gam.SMOOTH)
AREA <- data.frame(prd.area.SMOOTH, DAT, partial.resid = partial.res.area)
# save to a file
png("../Figures/triphasic_SAR_SMOOTH.png", width=1500, height=1500, res=500)
ggplot(AREA, aes(x=exp(Area_km*A.sd + A.mean), y=X50.)) +
geom_point(aes(x=exp(Area_km*A.sd + A.mean), y=partial.resid.50.),
color="grey", shape=1) +
geom_line(size=0.8) +
scale_x_continuous(trans = "log10",
minor_breaks = NULL,
breaks = c(0.01, 1, 100, 10000, 1000000),
labels = c("0.01", "1", expression(10^2), expression(10^4), expression(10^6))) +
ylab("Partial effect of Area") +
xlab(expression("Area" ~ (km^2))) +
geom_ribbon(aes(ymin=X2.5., ymax=X97.5.), alpha=0.3) +
theme_bw()
dev.off()
################################################################################
#  GRAIN-DEPENDENT ENVIRONMENTAL PREDICTORS
################################################################################
# indices of variable coefficients - model REALM
data.frame(all.varnames.REALM)
pure.id.REALM <- 8:16
area.id.REALM <- 38:46
# coefficient names
pure.varnames.REALM <- all.varnames.REALM[pure.id.REALM]
pure.coefnames.REALM <- paste("b", pure.varnames.REALM, sep="_")
area.varnames.REALM <- all.varnames.REALM[area.id.REALM]
area.coefnames.REALM <- paste("b", area.varnames.REALM, sep="_")
pure.coefs.REALM <- extract.pars(pure.coefnames.REALM, brm.REALM)
area.coefs.REALM <- extract.pars(area.coefnames.REALM, brm.REALM)
# -----------------
# indices of variable coefficients - model SMOOTH
data.frame(all.varnames.SMOOTH)
pure.id.SMOOTH <- 5:13
area.id.SMOOTH <- 14:22
# coefficient names
pure.varnames.SMOOTH <- all.varnames.SMOOTH[pure.id.SMOOTH]
pure.coefnames.SMOOTH <- paste("b", pure.varnames.SMOOTH, sep="_")
area.varnames.SMOOTH <- all.varnames.SMOOTH[area.id.SMOOTH]
area.coefnames.SMOOTH <- paste("b", area.varnames.SMOOTH, sep="_")
pure.coefs.SMOOTH <- extract.pars(pure.coefnames.SMOOTH, brm.SMOOTH)
area.coefs.SMOOTH <- extract.pars(area.coefnames.SMOOTH, brm.SMOOTH)
# -----------------
# function that extracts posterior quantiles of a parameter from a brms model object
get.one.var <- function(i, pure.coefs, area.coefs, varnames, model,
probs=c(0.025, 0.25, 0.5,0.75, 0.975))
{
pure.coef <- pure.coefs[[i]]
area.coef <- area.coefs[[i]]
A <- seq(from=-0.94, to=2.83, by=0.1)
N <- length(pure.coef)
res <- matrix(nrow=length(A), ncol=N)
for(j in 1:N)
{
b.pure <- pure.coef[j]
b.area <- area.coef[j]
res[,j] <- b.pure + b.area*A
}
require(matrixStats)
res <- matrixStats::rowQuantiles(res, probs=probs)
res <- data.frame(Model=model,
variable=rep(varnames[i], times=length(A)),
A, res)
return(res)
}
# ------------------
# function that extracts posterior quantiles of
# multiple parameters from a brms model object
get.vars <- function(pure.coefs, area.coefs, varnames, model,
probs=c(0.025, 0.25, 0.5,0.75, 0.975))
{
res <- list()
for(i in 1:length(varnames))
{
res[[i]] <- get.one.var(i=i,
pure.coefs=pure.coefs,
area.coefs=area.coefs,
varnames= varnames,
model=model)
}
require(plyr)
res <- plyr::ldply(res)
return(res)
}
# ------------------------------------------------------------------------------
# g
# ------------------------------------------------------------------------------
# get the quantiles of the posterior distributions using the functions above
REALM.scale.coefs <- get.vars(pure.coefs=pure.coefs.REALM,
area.coefs=area.coefs.REALM,
varnames= pure.varnames.REALM,
model="REALM")
SMOOTH.scale.coefs <- get.vars(pure.coefs=pure.coefs.SMOOTH,
area.coefs=area.coefs.SMOOTH,
varnames= pure.varnames.SMOOTH,
model="SMOOTH")
scale.coefs <- rbind(REALM.scale.coefs, SMOOTH.scale.coefs)
scale.coefs$variable <- as.character(scale.coefs$variable)
# ------------------------------------------------------------------------------
# use better names for scale coefficients
scale.coefs[scale.coefs$variable=="Tree_dens",'variable'] <- "Tree density"
scale.coefs[scale.coefs$variable=="min_DBH",'variable'] <- "Minimum DBH"
scale.coefs[scale.coefs$variable=="ANN_T",'variable'] <- "Annual T"
scale.coefs[scale.coefs$variable=="ISO_T",'variable'] <- "Isothermality"
scale.coefs[scale.coefs$variable=="MIN_P",'variable'] <- "Minimum P"
scale.coefs[scale.coefs$variable=="P_SEAS",'variable'] <- "P Seasonality"
scale.coefs[scale.coefs$variable=="ALT_DIF",'variable'] <- "Elevation span"
scale.coefs[scale.coefs$variable=="ISLANDmainland",'variable'] <- "Mainland"
scale.coefs[scale.coefs$variable=="ELONG",'variable'] <- "Elongation"
scale.coefs$variable <- factor(scale.coefs$variable,
levels=c("Mainland",
"Elevation span", "GPP",
"P Seasonality", "Minimum P",
"Annual T", "Isothermality",
"Tree density", "Minimum DBH") )
# ------------------------------------------------------------------------------
# plot the coefficients
coef.plot <- ggplot(scale.coefs, aes(x=exp(A*A.sd + A.mean), y=X50.)) +
geom_ribbon(aes(ymin=X2.5., ymax=X97.5., fill=Model), alpha=0.3) +
#geom_ribbon(aes(ymin=X25., ymax=X75., fill=NA), alpha=0.3) +
geom_line(aes(colour=Model), size=1) +
geom_line(aes(x=exp(A*A.sd + A.mean), y=X25., colour=Model),
linetype="dashed") +
geom_line(aes(x=exp(A*A.sd + A.mean), y=X75., colour=Model),
linetype="dashed") +
facet_grid(.~variable) +
geom_hline(yintercept=0, colour="darkgrey") +
xlab(expression("Area" ~ (km^2))) +
ylab("Environment effect") +
scale_colour_brewer(palette = "Set1") +
scale_fill_brewer(palette = "Set1") +
scale_x_continuous(trans = "log10",
minor_breaks = NULL,
breaks = c(0.001, 1, 1000, 1000000),
labels = c(expression(10^-3), "1", expression(10^3), expression(10^6))) +
theme_bw() +
theme(legend.position="right")
coef.plot
# save to a file
png("../Figures/environment_effects.png", width=2200, height=600, res=200)
coef.plot
dev.off()
# save to a file
pdf("../Figures/environment_effects.pdf", width=11, height=3)
coef.plot
dev.off()
# how many lines of R code do we have altoghether?
system("find . -name '*.php' | xargs wc -l")
getwd()
# how many lines of R code do we have altoghether?
system("find . -name '*.r' | xargs wc -l")
################################################################################
# Author: Petr Keil
# Email: pkeil@seznam.cz
# Date: Oct 25 2018
################################################################################
#
# Description: Here is where we produce the maps that use data observational units
# (the original plots and countries), both for mapping of the raw data and the
# model predictions.
#
################################################################################
# LOAD THE PACKAGES, THE DATA, AND THE MODELS
################################################################################
source("0_libraries_functions_settings.r")
source("4.1_Data_loading_standardization_and_centering.r")
# load the models
load("../Models/gam_REALM.Rdata")
load("../Models/gam_SMOOTH.Rdata")
load("../Models/brms_REALM.RData")
load("../Models/brms_SMOOTH.RData")
################################################################################
# PLOT MAPS
################################################################################
# extract the smooth GAM surfaces representing history
prd <- predict.gam(gam.SMOOTH, type="terms")
smooth.country <- prd[,"s(Lat,Lon):DAT_TYPECountry"]
smooth.plot <- prd[,"s(Lat,Lon):DAT_TYPEPlot"]
PRED <- data.frame(DAT, smooth.country, smooth.plot)
# extract predicted species richness
S.pred <- predict.gam(gam.SMOOTH, type="response")
PRED <- data.frame(PRED, S.pred)
# reproject geogrpahic coordinates of centroids to a Mollweide projection
latlon <- SpatialPoints(data.frame(PRED$Lon, PRED$Lat), CRS(WGS84))
xy <- data.frame(coordinates(spTransform(latlon, CRSobj = CRS(MOLLWEIDE))))
names(xy) <- c("X", "Y")
PRED <- data.frame(PRED, xy)
# select prediction data for countries
PRED.CNTRS <- PRED[PRED$DAT_TYPE=="Country",]
# global mainlands (not divided by country boundaries)
MAINL <- readOGR(dsn = "../Data/COUNTRIES", layer = "GSHHS_i_L1_simple")
MAINL <- spTransform(MAINL, CRSobj = CRS(MOLLWEIDE))
MAINL <- tidy(MAINL, region="id")
# equator, tropics, and polar circles
LINES <- readOGR(dsn = "../Data/COUNTRIES", layer = "ne_110m_geographic_lines")
LINES <- spTransform(LINES, CRSobj = CRS(MOLLWEIDE))
LINES <- tidy(LINES, region="name")
# load the country shapefile
CNTRS <- readOGR(dsn = "../Data/COUNTRIES", layer = "COUNTRIES_with_environment")
CNTRS@data <- dplyr::select(CNTRS@data, NAME)
# remove the big countries
CNTRS <- CNTRS[(CNTRS$NAME %in% c("China", "United States", "Brazil")) == FALSE,]
# reproject the countries
CNTRS <- spTransform(CNTRS, CRSobj = CRS(MOLLWEIDE))
PRED.CNTRS <- merge(CNTRS, PRED.CNTRS, by.x="NAME", by.y="Loc_ID")
PRED.CNTRS[PRED.CNTRS$NAME == "Alaska","REALM"] <- "Nearctic"
PRED.CNTRS[PRED.CNTRS$NAME == "Alaska","ISLAND"] <- 0
# create the norhtern-southern hemisphere identifier
PRED.CNTRS@data <- data.frame(PRED.CNTRS@data, Hemisphere=rep("Palearctic & Nearctic",
times=nrow(PRED.CNTRS@data)))
is.Tropics <- (PRED.CNTRS@data$REALM %in% c("Western Palearctic","Eastern Palearctic","Nearctic")) == FALSE
a <- PRED.CNTRS@data
a$Hemisphere <- as.character(a$Hemisphere)
a$Hemisphere[is.Tropics] <- "Tropics"
PRED.CNTRS@data <- a
# DATA FOR PLOTS ---------------------------------------------------------------
PRED.PLOTS <- PRED[PRED$DAT_TYPE=="Plot",]
# prepare the polygons for GGPLOT2 ---------------
C.fort <- tidy(PRED.CNTRS, region="NAME")
C.fort <- merge(C.fort, PRED.CNTRS@data, by.x="id", by.y="NAME")
# BLANK THEME FOR GGPLOT2
blank.theme <- theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
blank.theme <- theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
legend.position=c(0.6, 0.05),
legend.direction = "horizontal",
legend.title = element_blank(),
plot.title = element_text(face=quote(bold)),
#legend.title.align = 0,
panel.background=element_blank(),
panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
s.cntr <- ggplot(C.fort, aes(long, lat, group=group)) +
geom_polygon(data=LINES,  aes(long, lat, group=group),
colour="darkgrey", size=0.2) +
geom_polygon(aes(fill=S), colour="black", size=.2) +
scale_fill_distiller(palette = "Spectral", name="S",
trans="log10", limits=c(1,6500)) +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
ggtitle("a") + theme_minimal() +
# labs(subtitle = expression(S[country] ~ "(richness at the country grain)")) +
xlab("") + ylab("") + blank.theme
s.plot <- ggplot(MAINL, aes(long, lat, group=group)) +
geom_polygon(data=LINES,  aes(long, lat, group=group),
colour="darkgrey", size=0.2) +
geom_polygon(fill="lightgrey", colour="black", size=.2) +
geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL, colour=S), size=1, shape=4) +
#geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL), size=1, colour="black",
#           shape =1 , size=.2) +
scale_colour_distiller(palette = "Spectral", name="S",
trans="log10", limits=c(1,6500)) +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
ggtitle("b") + theme_minimal() +
#labs(subtitle = expression(S[plot] ~ "(richness at the plot grain)")) +
xlab("") + ylab("") + blank.theme
tiff("../Figures/observed_richness_maps.tif", width=2000, height=2100, res=350,
compression = "lzw")
grid.arrange(s.cntr, s.plot, ncol=1, nrow=2)
dev.off()
s.plot <- ggplot(MAINL, aes(long, lat, group=group)) +
geom_polygon(data=LINES,  aes(long, lat, group=group),
colour="black", size=0.2) +
geom_polygon(fill="lightgrey", colour="black", size=.2) +
geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL, colour=S), size=1, shape=4) +
#geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL), size=1, colour="black",
#           shape =1 , size=.2) +
scale_colour_distiller(palette = "Spectral", name="S",
trans="log10", limits=c(1,6500)) +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
ggtitle("b") + theme_minimal() +
#labs(subtitle = expression(S[plot] ~ "(richness at the plot grain)")) +
xlab("") + ylab("") + blank.theme
tiff("../Figures/observed_richness_maps.tif", width=2000, height=2100, res=350,
compression = "lzw")
grid.arrange(s.cntr, s.plot, ncol=1, nrow=2)
dev.off()
s.plot <- ggplot(MAINL, aes(long, lat, group=group)) +
geom_polygon(data=LINES,  aes(long, lat, group=group),
colour="darkgrey", size=0.2, fill="black") +
geom_polygon(fill="lightgrey", colour="black", size=.2) +
geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL, colour=S), size=1, shape=4) +
#geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL), size=1, colour="black",
#           shape =1 , size=.2) +
scale_colour_distiller(palette = "Spectral", name="S",
trans="log10", limits=c(1,6500)) +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
ggtitle("b") + theme_minimal() +
#labs(subtitle = expression(S[plot] ~ "(richness at the plot grain)")) +
xlab("") + ylab("") + blank.theme
tiff("../Figures/observed_richness_maps.tif", width=2000, height=2100, res=350,
compression = "lzw")
grid.arrange(s.cntr, s.plot, ncol=1, nrow=2)
dev.off()
s.plot <- ggplot(MAINL, aes(long, lat, group=group)) +
geom_polygon(data=LINES,  aes(long, lat, group=group),
colour="darkgrey", size=0.2) +
geom_polygon(fill="black", colour="black", size=.2) +
geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL, colour=S), size=1, shape=4) +
#geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL), size=1, colour="black",
#           shape =1 , size=.2) +
scale_colour_distiller(palette = "Spectral", name="S",
trans="log10", limits=c(1,6500)) +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
ggtitle("b") + theme_minimal() +
#labs(subtitle = expression(S[plot] ~ "(richness at the plot grain)")) +
xlab("") + ylab("") + blank.theme
tiff("../Figures/observed_richness_maps.tif", width=2000, height=2100, res=350,
compression = "lzw")
grid.arrange(s.cntr, s.plot, ncol=1, nrow=2)
dev.off()
s.plot <- ggplot(MAINL, aes(long, lat, group=group)) +
geom_polygon(data=LINES,  aes(long, lat, group=group),
colour="darkgrey", size=0.2) +
geom_polygon(fill="darkgrey", colour="black", size=.2) +
geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL, colour=S), size=1, shape=4) +
#geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL), size=1, colour="black",
#           shape =1 , size=.2) +
scale_colour_distiller(palette = "Spectral", name="S",
trans="log10", limits=c(1,6500)) +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
ggtitle("b") + theme_minimal() +
#labs(subtitle = expression(S[plot] ~ "(richness at the plot grain)")) +
xlab("") + ylab("") + blank.theme
tiff("../Figures/observed_richness_maps.tif", width=2000, height=2100, res=350,
compression = "lzw")
grid.arrange(s.cntr, s.plot, ncol=1, nrow=2)
dev.off()
s.plot <- ggplot(MAINL, aes(long, lat, group=group)) +
geom_polygon(data=LINES,  aes(long, lat, group=group),
colour="darkgrey", size=0.2) +
geom_polygon(fill="darkgrey", colour="black", size=.2) +
geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL, colour=S), size=1, shape=5) +
#geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL), size=1, colour="black",
#           shape =1 , size=.2) +
scale_colour_distiller(palette = "Spectral", name="S",
trans="log10", limits=c(1,6500)) +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
ggtitle("b") + theme_minimal() +
#labs(subtitle = expression(S[plot] ~ "(richness at the plot grain)")) +
xlab("") + ylab("") + blank.theme
tiff("../Figures/observed_richness_maps.tif", width=2000, height=2100, res=350,
compression = "lzw")
grid.arrange(s.cntr, s.plot, ncol=1, nrow=2)
dev.off()
s.plot <- ggplot(MAINL, aes(long, lat, group=group)) +
geom_polygon(data=LINES,  aes(long, lat, group=group),
colour="darkgrey", size=0.2) +
geom_polygon(fill="darkgrey", colour="black", size=.2) +
geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL, colour=S), size=1, shape=1) +
#geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL), size=1, colour="black",
#           shape =1 , size=.2) +
scale_colour_distiller(palette = "Spectral", name="S",
trans="log10", limits=c(1,6500)) +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
ggtitle("b") + theme_minimal() +
#labs(subtitle = expression(S[plot] ~ "(richness at the plot grain)")) +
xlab("") + ylab("") + blank.theme
tiff("../Figures/observed_richness_maps.tif", width=2000, height=2100, res=350,
compression = "lzw")
grid.arrange(s.cntr, s.plot, ncol=1, nrow=2)
dev.off()
s.plot <- ggplot(MAINL, aes(long, lat, group=group)) +
geom_polygon(data=LINES,  aes(long, lat, group=group),
colour="darkgrey", size=0.2) +
geom_polygon(fill="darkgrey", colour="black", size=.2) +
geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL, colour=S), size=1, shape=1) +
#geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL), size=1, colour="black",
#           shape =1 , size=.2) +
scale_colour_distiller(palette = "Spectral", name="S",
trans="log10", limits=c(1,6500)) +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
ggtitle("b") + theme_minimal() +
#labs(subtitle = expression(S[plot] ~ "(richness at the plot grain)")) +
xlab("") + ylab("") + blank.theme +
theme(panel.background = element_rect(fill = "lightblue",
colour = "lightblue",
size = 0.5, linetype = "solid"),)
tiff("../Figures/observed_richness_maps.tif", width=2000, height=2100, res=350,
compression = "lzw")
grid.arrange(s.cntr, s.plot, ncol=1, nrow=2)
dev.off()
s.plot <- ggplot(MAINL, aes(long, lat, group=group)) +
geom_polygon(data=LINES,  aes(long, lat, group=group),
colour="darkgrey", size=0.2) +
geom_polygon(fill="darkgrey", colour="black", size=.2) +
geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL, colour=S), size=1, shape=1) +
#geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL), size=1, colour="black",
#           shape =1 , size=.2) +
scale_colour_distiller(palette = "Spectral", name="S",
trans="log10", limits=c(1,6500)) +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
ggtitle("b") + theme_minimal() +
#labs(subtitle = expression(S[plot] ~ "(richness at the plot grain)")) +
xlab("") + ylab("") + blank.theme +
theme(panel.background = element_rect(fill = "lightgrey",
colour = "lightgrey",
size = 0.5, linetype = "solid"),)
tiff("../Figures/observed_richness_maps.tif", width=2000, height=2100, res=350,
compression = "lzw")
grid.arrange(s.cntr, s.plot, ncol=1, nrow=2)
dev.off()
s.cntr <- ggplot(C.fort, aes(long, lat, group=group)) +
geom_polygon(data=LINES,  aes(long, lat, group=group),
colour="darkgrey", size=0.2) +
geom_polygon(aes(fill=S), colour="black", size=.2) +
scale_fill_distiller(palette = "Spectral", name="S",
trans="log10", limits=c(1,6500)) +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
ggtitle("a") + theme_minimal() +
# labs(subtitle = expression(S[country] ~ "(richness at the country grain)")) +
xlab("") + ylab("") + blank.theme
s.plot <- ggplot(MAINL, aes(long, lat, group=group)) +
geom_polygon(data=LINES,  aes(long, lat, group=group),
colour="darkgrey", size=0.2) +
geom_polygon(fill="darkgrey", colour="black", size=.2) +
geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL, colour=S), size=1, shape=1) +
#geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL), size=1, colour="black",
#           shape =1 , size=.2) +
scale_colour_distiller(palette = "Spectral", name="S",
trans="log10", limits=c(1,6500)) +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
ggtitle("b") + theme_minimal() +
#labs(subtitle = expression(S[plot] ~ "(richness at the plot grain)")) +
xlab("") + ylab("") + blank.theme +
theme(panel.background = element_rect(fill = "black",
colour = "black",
size = 0.5, linetype = "solid"),)
tiff("../Figures/observed_richness_maps.tif", width=2000, height=2100, res=350,
compression = "lzw")
grid.arrange(s.cntr, s.plot, ncol=1, nrow=2)
dev.off()
s.cntr <- ggplot(C.fort, aes(long, lat, group=group)) +
geom_polygon(data=LINES,  aes(long, lat, group=group),
colour="darkgrey", size=0.2) +
geom_polygon(aes(fill=S), colour="black", size=.2) +
scale_fill_distiller(palette = "Spectral", name="S",
trans="log10", limits=c(1,6500)) +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
ggtitle("a") + theme_minimal() +
# labs(subtitle = expression(S[country] ~ "(richness at the country grain)")) +
xlab("") + ylab("") + blank.theme
s.plot <- ggplot(MAINL, aes(long, lat, group=group)) +
geom_polygon(data=LINES,  aes(long, lat, group=group),
colour="darkgrey", size=0.2) +
geom_polygon(fill="darkgrey", colour="black", size=.2) +
geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL, colour=S), size=1, shape=1) +
#geom_point(data=PRED.PLOTS, aes(x=X, y=Y, group=NULL), size=1, colour="black",
#           shape =1 , size=.2) +
scale_colour_distiller(palette = "Spectral", name="S",
trans="log10", limits=c(1,6500)) +
scale_x_continuous(limits = c(-12000000, 16000000)) +
scale_y_continuous(limits = c(-6.4e+06, 8.8e+06)) +
ggtitle("b") + theme_minimal() +
#labs(subtitle = expression(S[plot] ~ "(richness at the plot grain)")) +
xlab("") + ylab("") + blank.theme +
theme(panel.background = element_rect(fill = "lightgrey",
colour = "lightgrey",
size = 0.5, linetype = "solid"),)
tiff("../Figures/observed_richness_maps.tif", width=2000, height=2100, res=350,
compression = "lzw")
grid.arrange(s.cntr, s.plot, ncol=1, nrow=2)
dev.off()
